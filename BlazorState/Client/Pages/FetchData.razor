@page "/fetchdata"
@using BlazorState.Shared
@using Microsoft.AspNetCore.WebUtilities
@inject DAppState DState;

@inject HttpClient Http
@inject NavigationManager NavManager
@inject JSStorage JsStorage;

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<p role="status">ApplicationState Counter Value: @ApplicationState.Counter</p>
<p role="status">Dependency State Counter Value: @DState.Counter</p>

<p role="status">Querystring Counter Value: @CounterQuery</p>

<p role="status">BrowserStorage State Counter Value: @CounterBrowser</p>


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    [CascadingParameter]
    public AppState ApplicationState { get; set; }

    public int CounterQuery { get; set; }
    public int CounterBrowser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");

        var querystring = QueryHelpers.ParseQuery(NavManager.ToAbsoluteUri(NavManager.Uri).Query);

        if(querystring.TryGetValue("counter", out var counter))
        {
            CounterQuery = Int32.Parse(counter);
        }
        CounterBrowser = Convert.ToInt32(await JsStorage.Read("counter"));

    }

}
